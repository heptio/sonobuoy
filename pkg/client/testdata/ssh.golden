
---
apiVersion: v1
kind: Namespace
metadata:
  name: 
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: sonobuoy
  name: sonobuoy-serviceaccount
  namespace: 
---
apiVersion: v1
kind: Secret
metadata:
  name: ssh-key
  namespace: 
type: Opaque
data:
  id_rsa: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDV2dJQkFBS0JnR2gzQ3k2S01SUVhrbVlRRFpYMjZLNUYvalAwUFZPR1RsNHpqTGVnV3dxZlNrenFWNjl0ClMyWi8vSFFmYUJHVlpBVUZadUw5Rjh0RmliTGFod0FNWjIvOFUwK2JCT05jd2dPRnl2ZXd4WGpwQ04xR1JKL3QKMW12Q3NucHY2OUdHZjFDSmd2UU9XbWRJRVliUnF1WWRrZURDaE9YSkQvWEt6SUsweGIvZ3phWHpBZ01CQUFFQwpnWUExc3lRclcxeFpRTGpBQUhhTFpXNDh6N3daeHU2VGRoSG8rTVRZUy9VZzQ3dFZDSTNrbnVGSW9uZ0sxVzR3Cnc4T3psUkJMbE9EYlhEYXBtdzRVcDB1d0xDM2xTQUJtcUVNUnl2TjM3d0kyUU9LelBuWnRVU1VsNlBJdVRMU00KcFc2eFJPc0JxRm9Ta1NyR21ZZHk1eFJOL3RvQlRQZS93NDlCZDl1RUozQ0VHUUpCQUtla0ZyRWVnYUpKK2pzcQpuQ0MwbkNWNGZBRzY4SmtDVWJaZWc1RHZSeTJXWFB2SnNraWlHVUVOOThQbUxzMWsySHdHa3B2aUJWL0pJUVFGCjBOK2UvOFVDUVFDZmhwUnRvUzVVOVA0VlBBSFlwazd0NmNIbzJCdC9aT1lVRkFSL0xFQlpZdGtSRllhMjhTejgKU0JoaEQwKzJqZmllMHNOUVhxS1NoUlJxaVN6N1UzSlhBa0JDVS9BT2dDMTJVcUxKQ2lEZjU5WG9GWFdyRVpYawpWRUNVVVd6b3lXTjJMQW42TFdGMnozd0NlMDVPbWlKbWJjSWh3RS85a1QzakdpY1ArbVVjTlVLcEFrQXZPaDV6CkhrYWpMQ3lVaU1GYkxGRXRxZ2lZTUhKamtyRnl2RUpnaSs4NUIwU1FCRGx2cTVMUDFXQXlTK0FqZ1lCYk5MWlIKOHRKYVlqK2JFcVZZZW1uZEFrQk5HUTVWbFI0ZktVa2Q2cEZ5NW5oYUlWY0EybnF2M3llWWxCSzNWUy90SUd6SApoVDczTkpFYlovU1l6MUhiQmVnbFQrUDE5alVwRGtHclZCS1RJTS9vCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: v1
data:
  config.json: |
    {"Description":"","UUID":"","Version":"","ResultsDir":"","Resources":null,"Filters":{"Namespaces":"","LabelSelector":""},"Limits":{"PodLogs":{"LimitSize":"","LimitTime":""}},"Server":{"bindaddress":"","bindport":0,"advertiseaddress":"","timeoutseconds":0},"Plugins":null,"PluginSearchPath":null,"Namespace":"","LoadedPlugins":null,"WorkerImage":"","ImagePullPolicy":""}
kind: ConfigMap
metadata:
  labels:
    component: sonobuoy
  name: sonobuoy-config-cm
  namespace: 
---
apiVersion: v1
data:
  e2e.yaml: |
    sonobuoy-config:
      driver: Job
      plugin-name: e2e
      result-type: e2e
    spec:
      env:
      - name: E2E_FOCUS
        value: ''
      - name: E2E_SKIP
        value: ''
      - name: E2E_PARALLEL
        value: ''
      - name: LOCAL_SSH_KEY
        value: 'id_rsa'
      - name: AWS_SSH_KEY
        value: '/root/.ssh/id_rsa'
      - name: KUBE_SSH_KEY
        value: 'id_rsa'
      - name: KUBE_SSH_USER
        value: ssh-user
      command: ["/run_e2e.sh"]
      image: 
      imagePullPolicy: 
      name: e2e
      volumeMounts:
      - mountPath: /tmp/results
        name: results
        readOnly: false
      - mountPath: /root/.ssh
        name: sshkey-vol
      tolerations:
        - operator: "Exists"
    extra-volumes:
    - name: sshkey-vol
      secret:
        secretName: ssh-key
        defaultMode: 256
  systemd-logs.yaml: |
    sonobuoy-config:
      driver: DaemonSet
      plugin-name: systemd-logs
      result-type: systemd_logs
    spec:
      command: ["/bin/sh", "-c", "/get_systemd_logs.sh && sleep 3600"]
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            fieldPath: spec.nodeName
      - name: RESULTS_DIR
        value: /tmp/results
      - name: CHROOT_DIR
        value: /node
      image: gcr.io/heptio-images/sonobuoy-plugin-systemd-logs:latest
      imagePullPolicy: 
      name: sonobuoy-systemd-logs-config
      securityContext:
        privileged: true
      volumeMounts:
      - mountPath: /tmp/results
        name: results
        readOnly: false
      - mountPath: /node
        name: root
        readOnly: false
kind: ConfigMap
metadata:
  labels:
    component: sonobuoy
  name: sonobuoy-plugins-cm
  namespace: 
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    component: sonobuoy
    run: sonobuoy-master
    tier: analysis
  name: sonobuoy
  namespace: 
spec:
  containers:
  - command:
    - /bin/bash
    - -c
    - /sonobuoy master --no-exit=true -v 3 --logtostderr
    env:
    - name: SONOBUOY_ADVERTISE_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    image: 
    imagePullPolicy: 
    name: kube-sonobuoy
    volumeMounts:
    - mountPath: /etc/sonobuoy
      name: sonobuoy-config-volume
    - mountPath: /plugins.d
      name: sonobuoy-plugins-volume
    - mountPath: /tmp/sonobuoy
      name: output-volume
  restartPolicy: Never
  serviceAccountName: sonobuoy-serviceaccount
  volumes:
  - configMap:
      name: sonobuoy-config-cm
    name: sonobuoy-config-volume
  - configMap:
      name: sonobuoy-plugins-cm
    name: sonobuoy-plugins-volume
  - emptyDir: {}
    name: output-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: sonobuoy
    run: sonobuoy-master
  name: sonobuoy-master
  namespace: 
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    run: sonobuoy-master
  type: ClusterIP
